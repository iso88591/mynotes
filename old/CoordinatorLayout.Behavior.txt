onInterceptTouchEvent()：是否拦截触摸事件

onTouchEvent()：处理触摸事件

layoutDependsOn()：确定使用Behavior的View要依赖的View的类型

onDependentViewChanged()：当被依赖的View状态改变时回调

onDependentViewRemoved()：当被依赖的View移除时回调

onMeasureChild()：测量使用Behavior的View尺寸

onLayoutChild()：确定使用Behavior的View位置

onStartNestedScroll()：嵌套滑动开始（ACTION_DOWN），确定Behavior是否要监听此次事件

onStopNestedScroll()：嵌套滑动结束（ACTION_UP或ACTION_CANCEL）

onNestedScroll()：嵌套滑动进行中，要监听的子 View的滑动事件已经被消费

onNestedPreScroll()：嵌套滑动进行中，要监听的子 View将要滑动，滑动事件即将被消费（但最终被谁消费，可以通过代码控制）

onNestedFling()：要监听的子 View在快速滑动中

onNestedPreFling()：要监听的子View即将快速滑动



 /**
     * 表示是否给应用了Behavior 的View 指定一个依赖的布局，通常，当依赖的View
	 布局发生变化时,不管被被依赖View 的顺序怎样，被依赖的View也会重新布局
     * @param parent
     * @param child 绑定behavior 的View
     * @param dependency 依赖的view
     * @return 如果child 是依赖的指定的View 返回true,否则返回false
     */
    @Override
    public boolean layoutDependsOn(CoordinatorLayout parent, View child, View dependency) {
        return super.layoutDependsOn(parent, child, dependency);
    }

    /**
     * 当被依赖的View 状态(位置、大小等)发生变化时，这个方法被调用
     * @param parent
     * @param child
     * @param dependency
     * @return
     */
    @Override
    public boolean onDependentViewChanged(CoordinatorLayout parent, View child, View dependency) {
        return super.onDependentViewChanged(parent, child, dependency);
    }

    /**
     *  当coordinatorLayout 的子View试图开始嵌套滑动的时候被调用。
     * 当返回值为true的时候表明coordinatorLayout 充当nested scroll parent 处理这次滑动，
	 * 需要注意的是只有当返回值为true的时候，Behavior 才能收到后面的一些nested scroll 
	 * 事件回调（如：onNestedPreScroll、onNestedScroll等）这个方法有个重要的参数 
	 * nestedScrollAxes，表明处理的滑动的方向。
     * @param coordinatorLayout 和Behavior 绑定的View的父CoordinatorLayout
     * @param child  和Behavior 绑定的View
     * @param directTargetChild
     * @param target
     * @param nestedScrollAxes 
嵌套滑动 应用的滑动方向，看 {@link ViewCompat#SCROLL_AXIS_HORIZONTAL},
        {@link ViewCompat#SCROLL_AXIS_VERTICAL}
     * @return
     */
    @Override
    public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {
        return super.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);
    }

    /**
     * 嵌套滚动发生之前被调用
       在nested scroll child 消费掉自己的滚动距离之前，嵌套滚动每次被nested scroll child
       更新都会调用onNestedPreScroll。注意有个重要的参数consumed，可以修改这个数     
	   组表示你消费了多少距离。假设用户滑动了100px,child 做了90px 的位移，你需要     
	   把 consumed［1］的值改成90，
     * 这样coordinatorLayout就能知道只处理剩下的10px的滚动。
     * @param coordinatorLayout
     * @param child
     * @param target
     * @param dx  用户水平方向的滚动距离
     * @param dy  用户竖直方向的滚动距离
     * @param consumed
     */
    @Override
    public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dx, int dy, int[] consumed) {
        super.onNestedPreScroll(coordinatorLayout, child, target, dx, dy, consumed);
    }

    /**
     * 进行嵌套滚动时被调用
     * @param coordinatorLayout
     * @param child
     * @param target
     * @param dxConsumed target 已经消费的x方向的距离
     * @param dyConsumed target 已经消费的y方向的距离
     * @param dxUnconsumed x 方向剩下的滚动距离
     * @param dyUnconsumed y 方向剩下的滚动距离
     */
    @Override
    public void onNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) {
        super.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);
    }

    /**
     * 嵌套滚动结束时被调用，这是一个清除滚动状态等的好时机。
     * @param coordinatorLayout
     * @param child
     * @param target
     */
    @Override
    public void onStopNestedScroll(CoordinatorLayout coordinatorLayout, View child, View target) {
        super.onStopNestedScroll(coordinatorLayout, child, target);
    }

    /**
     * onStartNestedScroll返回true才会触发这个方法，接受滚动处理后回调，可以在这个
      方法里做一些准备工作，如一些状态的重置等。
     * @param coordinatorLayout
     * @param child
     * @param directTargetChild
     * @param target
     * @param nestedScrollAxes
     */
    @Override
    public void onNestedScrollAccepted(CoordinatorLayout coordinatorLayout, View child, View directTargetChild, View target, int nestedScrollAxes) {
        super.onNestedScrollAccepted(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);
    }

    /**
     * 用户松开手指并且会发生惯性动作之前调用，参数提供了速度信息，可以根据这些 
	 速度信息决定最终状态，比如滚动Header，是让Header处于展开状态还是折叠状   
	 态。返回true 表示消费了fling.
     * @param coordinatorLayout
     * @param child
     * @param target
     * @param velocityX  x方向的速度
     * @param velocityY  y方向的速度
     * @return
     */
    @Override
    public boolean onNestedPreFling(CoordinatorLayout coordinatorLayout, View child, View target, float velocityX, float velocityY) {
        return super.onNestedPreFling(coordinatorLayout, child, target, velocityX, velocityY);
    }

/*
 * 可以重写这个方法对子View 进行重新布局
 * @param coordinatorLayout
     * @param child
 * @param layoutDirection 布局的方向
     */
@Override
    public boolean onLayoutChild(CoordinatorLayout parent, View child, int layoutDirection) {
        return super.onLayoutChild(parent, child, layoutDirection);
    }
	
	
	
